区间类问题

一般为模拟进行，比较通用的方法是把区间在数轴上划出来，一般按照左端点从小到大排序，然后一段段进行处理
LC相关题目
56
57
163
986
616

区间中离散点的和可以通过前缀和跳过大部分处理
LC相关题目
1109

还有一种用TreeMap做抵消的方法，把区间开头的都计数+1，结尾的都-1，TreeMap的数值表示这个端点抵消的情况，比如1指的是多一个，-1指的是少一个
而TreeMap 的Key则是有序的，因此可以对TreeMap的Key进行遍历求解
模板如下：
TreeMap<Integer, Integer> map = new TreeMap<>();
for(int[] itv : intervals){//添加区间节点的过程
    map.put(itv[0], map.getOrDefault(itv[0], 0)+1);
    map.put(itv[1], map.getOrDefault(itv[1], 0)-1);
}

for (int k : map.keySet()){
    xxxx
}

LC相关题目
56 解法3
253 解法2
1094
7312（731 解法2）
732

Interval的另一个模板是
/*
    在每次选择中，选择的区间结尾越小，留给后面的区间的空间越大，那么后面能够选择的区间个数也就越大。
    按区间的结尾进行升序排序，每次选择结尾最小，并且和前一个区间不重叠的区间判断是否相交，如果不相交则count+1，更新x_end，然后往下进行。
     */

    //模板方法，算出这些区间中最多有几个互不相交的区间。
    public int intervalSchedule(int[][] intvs) {
        if (intvs.length == 0) return 0;
        // 按 end 升序排序
        Arrays.sort(intvs, Comparator.comparingInt(a -> a[1]));
        // 至少有一个区间不相交
        int count = 1;
        // 排序后，第一个区间就是 x
        //由于我们事先排了序，不难发现所有与 x 相交的区间必然会与 x 的 end 相交；
        //如果一个区间不想与 x 的 end 相交，它的 start 必须要大于（或等于）x 的 end

        int x_end = intvs[0][1];
        for (int[] interval : intvs) {
            int start = interval[0];
            if (start >= x_end) {
                // 找到下一个选择的区间了
                count++;
                x_end = interval[1];
            }
        }
        return count;
    }

LC相关题目
435
452
