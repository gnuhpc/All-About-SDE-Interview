什么时候使用BFS：
图 的遍 历 Traversal in Graph
• 层级遍历 Level Order Traversal
• 由点及面 Connected Component
• 拓扑排序 Topological Sorting
最短路径 Shortest Path in Simple Graph
• 仅限简单图求最短路径
• 即，图中每条边长度都是1，且没有方向

BFS的过程
1. 构建队列
2. 将要遍历的结构中的起始遍历元素放入队列中, 如果可能绕回来,则注意他同时维护visited数组对其进行已访问标识
3. 进入遍历循环, 条件为!queue.isEmpty()
    3.0 这个时候的queue size是这一层的元素的个数,如果需要计数可以在这一步进行,
    同时也可以维护一个depth在这一步++进行层数(步数)的记录
    3.1 取出该元素
    3.2 遍历该元素的邻居, 进行运算后或者判断有必要后续再处理的则放入队列中,同时设置visited

int BFS(Node root, Node target) {
    Queue<Node> queue;  // 建立队列
    int step = 0;       // 建立行动步数
    // initialize
    add root to queue;
    // BFS
    while (queue is not empty) {
        step = step + 1;
        // 记录此时的队列大小
        int size = queue.size();
        for (int i = 0; i < size; ++i) { //遍历队列中的元素，并将新元素加入到队列中
            Node cur = the first node in queue;
            return step if cur is target;
            for (Node next : the neighbors of cur) {
                add next to queue;       //加入查找的方向
            }
            remove the first node from queue;
        }
    }
    return -1;          // 没有找到目标返回-1
}


LC相关题目
102
429
107
637
139
127
433

对于 「Tree 的 BFS」 （典型的「单源 BFS」） : 首先把 root 节点入队，再一层一层无脑遍历就行了。
对于 「图 的 BFS」 （「多源 BFS」） 与「Tree 的 BFS」的区别注意以下两条:

多源BFS
一个理论基础是超级原点，假设有一个超级原点是连接所有起始点的点，
先将它入队列，然后弹出后将所有起始点入队列后往下走

1. Tree 只有 1 个 root，而图可以有多个源点，所以首先需要把多个源点都入队；
和一般的 BFS 模板不同的是：通常的 BFS 是要先计算每一层入队的元素个数，再逐一遍历。
而这个题目由于最初超级元点的存在，因此要开始一起入队

2. Tree 是有向的因此不需要标识是否访问过，而对于无向图来说，必须得标志是否访问过哦！
并且为了防止某个节点多次入队，需要在其入队之前就将其设置成已访问！


1. BFS可以做计步
    class WordNode {
        String word;
        int numSteps;
        WordNode pre;

        public WordNode(String word, int numSteps, WordNode pre) {
            this.word = word;
            this.numSteps = numSteps;
            this.pre = pre;
        }
    }

往下回溯用最后一个节点即可,另外numsteps在每一层+1 , 维护unvisited和visited,在明确到下一层的时候将unvisited更新

LC相关题目
126
127

2. BFS过去实际上是最短路径，可以通过map<Node, Integer> 进行标注节点和对应的step，完事儿用DFS进行汇总
LC相关题目
126
127
433

3. 双向BFS适用于知道起点和终点，求之间最短路径的情况
step1: 构建起点终点的集合，将起点和终点分别加入
step2: 递归双向BFS，构建每个单词的层级对应关系
    // 始终以少的进行探索
    // 在已访问的单词集合中去除
    // 标记本层是否已到达目标单词
    // 记录本层所访问的单词

LC相关题目
126
127

5. 在求最短、最小等问题时需要遍历最短、最小的情况但是又不想往下一层遍历，可以在while循环中设置found变量，
当找到后将此变量设置为true，碰到
found == true的时候就continue直到queue弹出所有的结果，这一层遍历完毕。
LC相关题目
301

6. 在计算距离的时候可以使用坐标+到这点的距离放入queue中进行BFS
Queue<int[]> queue = new LinkedList<>();
queue.add(new int[] {i, j, 0});

poll出来后使用一个数组进行记录:distances[x][y] += dist; //更新d
然后再遍历外围一层的时候 queue.add(new int[] {newX, newY, dist + 1});
Or use an array to memo the distance

LC相关题目
317, 286

7. 还可以添加一个队列记录列index
LC相关题目
314
987

8. 多源BFS
LC相关题目
542
1162

9. 层次遍历的前后脚节点也可以使用一个prev进行迭代，一开始TreeNode prev = root 在层次遍历时形成双指针
LC相关题目
958
