二分搜索

首先要确定二分的范围

// 二分法四要素

start + 1 < end
start + (end - start) / 2
Sample[mid] ==, <, >
Sample[start] Sample[end] ? target

比O(n)更优的时间复杂度
几乎只能是O(logn)的二分法
经验之谈：根据时间复杂度倒推算法是面试中的常用策略


两类二分，三个境界
• 二分位置Binary search on index
    • OOXX
    • Half half
• 二分答案Binary search on result

在实战中注意学会使用Arrays.binarySearch(array, num);

如果查找的值包含在数组中，返回搜索的第一个值的下标；
如果查找的值不在数组中，返回（-插入点-1）；插入点即为第一个大于此查找值的元素下标
插入点 为将该值插入数组的那一点：即第一个大于此键的元素下标，如果数组中的所有元素都小于指定的值，则为 arr.length

记住一点，如果是负数，+1取反即得到插入点的idx


面试中也可以写递归方法,向左找向右找可以参看LC 1011这道题

1. 一般碰到有序数组第一个反应就应该是二分，对数字进行二分进行查找，主要是数值。
LC相关题目
4

2. 对idx，也就是个数进行二分
LC相关题目
4

例如可以求一个有序数组arr中小于等于number的数字个数
    private int countSmallerOrEqual(int[] arr, int number) {
        //这是对idx进行二分
        int start = 0, end = arr.length - 1;

        // find first index that arr[index] > number;
        while (start + 1 < end) {
            int mid = start + (end - start) / 2;
            if (arr[mid] <= number) {
                start = mid;
            } else {
                end = mid;
            }
        }

        if (arr[start] > number) {
            return start;
        }

        if (arr[end] > number) {
            return end;
        }

        return arr.length;
    }
LC相关题目

3. 对于有序数组，用二分法去直接猜结果对不对
LC相关题目
875
14 解法2

4. 对于double，就不能使用start+1<end这种while条件了，而是要根据题意中的误差范围进行
while (end - start > 1e-6)

LC相关题目
774

注意：Arrays.binarySearch 可以直接用
binarySearch
public static int binarySearch(byte[] a,
                               byte key)
使用二分搜索法来搜索指定的 byte 型数组，以获得指定的值。必须在进行此调用之前对数组进行排序（通过 sort(byte[]) 方法）。如果没有对数组进行排序，则结果是不确定的。如果数组包含多个带有指定值的元素，则无法保证找到的是哪一个。
参数：a - 要搜索的数组key - 要搜索的值返回：如果它包含在数组中，则返回搜索键的索引；否则返回 (-(插入点) - 1)。
插入点 被定义为将键插入数组的那一点：即第一个大于此键的元素索引，如果数组中的所有元素都小于指定的键，则为 a.length。
注意，这保证了当且仅当此键被找到时，返回的值将 >= 0。

1198